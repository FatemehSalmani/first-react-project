{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["navbar","state","className","this","props","totalCounters","Component","Counter","getBadgeClasses","formatCount","onClick","onIncrement","counter","onDelete","id","classes","value","counters","onReset","Counters","map","key","App","handleIncrement","index","indexOf","setState","handleReset","c","handleDelete","counterId","filter","Fragment","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4PAmBeA,E,2MAjBXC,MAAQ,G,wEAEJ,OACI,yBAAKC,UAAU,gCACd,0BAAMA,UAAU,gBAAhB,gBAGG,0BAAMA,UAAU,wCACVC,KAAKC,MAAMC,qB,GATZC,aCqCNC,E,iLA7BD,IAAD,OACL,OACI,6BACI,0BAAML,UAAWC,KAAKK,mBAAoBL,KAAKM,eAC/C,4BACIC,QAAS,WAAQ,EAAKN,MAAMO,YAAY,EAAKP,MAAMQ,UACnDV,UAAU,4BAFd,aAKA,4BACIQ,QAAS,kBAAM,EAAKN,MAAMS,SAAS,EAAKT,MAAMQ,QAAQE,KACtDZ,UAAU,6BAFd,a,wCASR,IAAIa,EAAU,mBAEd,OADAA,GAAwC,IAA7BZ,KAAKC,MAAMQ,QAAQI,MAAc,UAAY,Y,oCAI7C,IACHA,EAAUb,KAAKC,MAAMQ,QAArBI,MACR,OAAiB,IAAVA,EAAc,OAASA,M,GAjChBV,aCyBPW,E,YAvBX,WAAYb,GAAQ,IAAD,8BACf,4CAAMA,KACDH,MAAQG,EAFE,E,sEAIT,IAAD,EACgDD,KAAKC,MAAlDc,EADH,EACGA,QAASC,EADZ,EACYA,SAAUN,EADtB,EACsBA,SAAUF,EADhC,EACgCA,YACrC,OACI,6BACI,4BACID,QAASQ,EACThB,UAAU,8BAFd,SAGCiB,EAASC,KAAI,SAAAR,GAAO,OACjB,kBAAC,EAAD,CACIS,IAAKT,EAAQE,GACbF,QAASA,EACTC,SAAUA,EACVF,YAAaA,Y,GAjBdL,aCmDRgB,G,kBA/Cb,WAAYlB,GAAQ,IAAD,8BACjB,4CAAMA,KAURmB,gBAAkB,SAAAX,GAChB,IAAMK,EAAW,EAAKhB,MAAMkB,SACtBK,EAAQP,EAASQ,QAAQb,GAC/BK,EAASO,GAAT,eAAuBZ,GACvBK,EAASO,GAAOR,QAChB,EAAKU,SAAS,CAAET,cAhBC,EAkBnBU,YAAc,WACZ,IAAMV,EAAW,EAAKhB,MAAMkB,SAASC,KAAI,SAAAQ,GAEvC,OADAA,EAAEZ,MAAQ,EACHY,KAET,EAAKF,SAAS,CAAET,cAvBC,EAyBnBY,aAAe,SAAAC,GACb,IAAMX,EAAW,EAAKlB,MAAMkB,SAASY,QAAO,SAAAH,GAAC,OAAIA,EAAEd,KAAOgB,KAC1D,EAAKJ,SAAS,CAAEP,cAzBhB,EAAKlB,MAAQ,CACXkB,SAAU,CACR,CAAEL,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,GAChB,CAAEF,GAAI,EAAGE,MAAO,KAPH,E,sEA8BjB,OACE,kBAAC,IAAMgB,SAAP,KACE,kBAAC,EAAD,CAAQ3B,cAAiBF,KAAKF,MAAMkB,SAASY,QAAO,SAAAH,GAAC,OAAIA,EAAEZ,MAAQ,KAAGiB,SAEtE,0BAAM/B,UAAU,aACd,kBAAC,EAAD,CACEiB,SAAUhB,KAAKF,MAAMkB,SACrBD,QAASf,KAAKwB,YACdhB,YAAaR,KAAKoB,gBAClBV,SAAUV,KAAK0B,qB,GAxCTvB,cCOE4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.47bcf25e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nclass navbar extends Component {\n    state = {  }\n    render() { \n        return ( \n            <nav className=\"navbar navbar-light bg-light\">\n             <span className=\"navbar-brand\" >\n                 updete navbar \n             \n                <span className=\"badge badge-pill badge-secondary m-2\">\n                     {this.props.totalCounters}\n                 </span>\n                 \n            </span>\n            </nav>\n            );\n    }\n}\n \nexport default navbar;\n","import React, { Component } from 'react';\nclass Counter extends Component {\n    /*state = {\n        value: this.props.counter.value\n    };\n    handleIncreament = () => {\n        this.setState({value:this.state.value+1});\n    };*/\n\n    render() {\n        return (\n            <div>\n                <span className={this.getBadgeClasses()}>{this.formatCount()}</span>\n                <button\n                    onClick={() => { this.props.onIncrement(this.props.counter) }}\n                    className=\"btn btn-secondary btn-sm\">\n                    Increment\n            </button>\n                <button\n                    onClick={() => this.props.onDelete(this.props.counter.id)}\n                    className=\"btn btn-danger btn-sm m-2\">\n                    Delete\n            </button>\n            </div>\n        );\n    }\n    getBadgeClasses() {\n        let classes = \"badge m-2 badge-\";\n        classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\n        return classes;\n    }\n\n    formatCount() {\n        const { value } = this.props.counter;\n        return value === 0 ? \"Zero\" : value;\n    }\n}\n\nexport default Counter;","import React, { Component } from 'react';\nimport Counter from './counter'\nclass counters extends Component {\n    constructor(props) {\n        super(props)\n        this.state = props\n    }\n    render() {\n        const { onReset, Counters, onDelete, onIncrement } = this.props\n        return (\n            <div>\n                <button\n                    onClick={onReset}\n                    className=\"btn btn-primary btn-sm m-2\">Reset</button>\n                {Counters.map(counter =>\n                    <Counter\n                        key={counter.id}\n                        counter={counter}\n                        onDelete={onDelete}\n                        onIncrement={onIncrement}>\n                    </Counter>)}\n            </div>\n        );\n    }\n}\n\nexport default counters;","import React, { Component } from 'react';\nimport NavBar from './components/navbar';\nimport Counters from './components/counters';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      Counters: [\n        { id: 1, value: 0 },\n        { id: 2, value: 0 },\n        { id: 3, value: 0 },\n        { id: 4, value: 0 }\n      ]\n    }\n  }\n  handleIncrement = counter => {\n    const counters = this.state.Counters;\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n  };\n  handleReset = () => {\n    const counters = this.state.Counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n  handleDelete = counterId => {\n    const Counters = this.state.Counters.filter(c => c.id !== counterId);\n    this.setState({ Counters });\n  }\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar totalCounters = {this.state.Counters.filter(c => c.value > 0).length}\n         />\n        <main className=\"container\">\n          <Counters\n            Counters={this.state.Counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}